resources
| where type =~ 'microsoft.compute/virtualmachines'

// How should resources be grouped?
// Choose an option below and uncomment only the appropriate section.

// Option 1:  Uncomment THE FOLLOWING SECTION to group resources by name prefix.
//            Example: 'vmgroup01' name prefix is 'vmgroup'

// | where name matches regex '^[a-zA-Z]+\\d+$'             
// | extend group = tostring(extract('^[a-zA-Z]+', 0, name)) 

// Option 2:  Uncomment THE FOLLOWING SECTION to group resources by regex pattern. 
//            Replace 'regex-pattern' with your regex pattern.
//            The pattern should contain one and only one capture group.
//            Use Copilot to quickly build regex patterns using sample resource names.

// | extend group = tostring(extract_all(@'(?i)regex-pattern', name))

// Option 3:  Uncomment THE FOLLOWING SECTION to group resources by resource group.

// | extend group = resourceGroup

// Option 4:  Uncomment THE FOLLOWING SECTION to group resources by resource tag.
//            Replace 'tag-name' with your tag name.

// | extend group = tostring(tags['epic-app'])

// Option 5:  Uncomment THE FOLLOWING SECTION to provide your own grouping expression.
//            Replace '// grouping expression' with your own valid KQL grouping expression.
//            Your grouping expression should return a single string.

// | extend group = // grouping expression

| where isnotempty(group)
| summarize vmCount = count()
            by group, location, subscriptionId, vmZone = tostring(zones[0])
| summarize _totalZones = countif(isnotempty(vmZone)),
            _totalZonalVms = sumif(vmCount, isnotempty(vmZone)),
            _totalRegionalVms = sumif(vmCount, isempty(vmZone)),
            _zonalSpreadPct = iff(countif(isnotempty(vmZone)) < 2, real(0), round(100 - (((stdevif(vmCount, isnotempty(vmZone)) / sumif(vmCount, isnotempty(vmZone))) * 100)), 2))
            by group, location, subscriptionId
| project _totalZones, _totalZonalVms, _totalRegionalVms, _zonalSpreadPct, group, location, subscriptionId,
          alert_totalZones = tobool(_totalZones < min_of(2, _totalZonalVms)),
          alert_totalRegionalVms = tobool(_totalRegionalVms > 0),
          alert_zonalSpreadPct = tobool(_zonalSpreadPct < 80)
| project group, location, subscriptionId,
          totalVms = _totalZonalVms + _totalRegionalVms,
          totalZonalVms = _totalZonalVms,
          totalRegionalVms = iff(alert_totalRegionalVms, strcat(_totalRegionalVms, ' ⚠️'), tostring(_totalRegionalVms)),
          totalZones = iff(alert_totalZones, strcat(_totalZones, ' ⚠️'), tostring(_totalZones)),
          zonalSpreadScore = iff(alert_zonalSpreadPct, strcat(_zonalSpreadPct, ' % ⚠️'), strcat(_zonalSpreadPct, ' %')),
          notes = strcat(iff(alert_totalZones, '⚠️ Where possible, VMs in this group should be deployed across at least two (2) zones. ', '✅ VMs in this group are deployed across a sufficient number of zones. '),
                         iff(alert_totalRegionalVms, '⚠️ Some VMs in this group are regional (not deployed to any zone). ', '✅ All VMs in this group are zonal; none are regional. '), 
                         iff(alert_zonalSpreadPct, '⚠️ VMs in this group are not evenly spread across zones (max spread of 20%). ', '✅ All VMs in this group are spread evenly across zones. '))
